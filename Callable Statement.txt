import java.sql.*;
import java.util.logging.SocketHandler;

public class CallableStatement01 {
    public static void main(String[] args) throws SQLException, ClassNotFoundException {

      Class.forName("org.postgresql.Driver");
  Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "Qweasd123..");
 Statement st = con.createStatement();
          /*
    Java'da methodlar return type sahibi olsa da olmasa da method olarak adlandırılır.
    SQL'de ise data return ediyorsa "function" denir. Return yapmıyorsa "procedure" olarak adlandırılır.
     */




            //CallableStatement ile function çağırmayı parametrelendireceğiz.
            //1.Adım: Function kodunu yaz:
            String sql1 = "CREATE OR REPLACE FUNCTION  toplamaF(x NUMERIC, y NUMERIC)\n" +
                    "RETURNS NUMERIC\n" +
                    "LANGUAGE plpgsql\n" +
                    "AS\n" +
                    "$$\n" +
                    "BEGIN\n" +
                    "\n" +
                    "RETURN x+y;\n" +
                    "\n" +
                    "END\n" +
                    "$$";
            //2. Adım: Function'ı çalıştır.
            st.execute(sql1);

            //3. Adım: Fonction'ı çağır.
            CallableStatement cst1 = con.prepareCall("{? = call toplamaF(?, ?)}");  // ilk parametre return type

            //4. Adım: Return için registerOurParameter() methodunu, parametreler için ise set() ... methodlarını uygula.
            cst1.registerOutParameter(1, Types.NUMERIC);
            cst1.setInt(2, 6);
            cst1.setInt(3, 4);

            //5. Adım: execute() methodu ile CallableStatement'ı çalıştır.
            cst1.execute();

            //6. Adım: Sonucu çağırmak için return data type tipine göre

            System.out.println(cst1.getBigDecimal(1));


//
//        /*
//        Javada metodlar return type olsada olmasada method olarak adlandirilir. SQL de isebir fark var. Return type olursa, yani data return ediyorsa
//        bunlara function diyoruz. Return yapniyorsa ,procedure olarak adlandirilir.
//        CallableStatement ile function cagirmayi parametrelendirecegiz.
//         */
//
//        // 1.Adim function kodunu yaz.
//
//        String sql1 = "Create or replace function  toplamaF (x numeric, y numeric)\n" +
//                "Returns numeric \n" +
//                "language plpgsql\n" +
//                "as\n" +
//                "$$\n" +
//                "begin\n" +
//                "\n" +
//                "return x+y;\n" +
//                "\n" +
//                "end\n" +
//                "$$";
//
//        // 2. Adim : Function i calistir
//        st.execute(sql1);
//
//        // 3. Adim : Call function  (Return type'i belirtmek zorundayiz cagirmak icin .soyle cagiriyoruz.
//         con.prepareCall("{? = call toplamaF (? , ? }"); //bunu da CallableStatement in icine koyuyoruz.
//        CallableStatement cst1 =  con.prepareCall("{? = call toplamaF (? , ? }");
//
//
//
//
//        // ==>  numeric ==> bigint yada numeric kullanmaliyiz cagirmak icin
//         // ** SQL deki farkli data tiplerinin javada nasil karsiligi oldugunu bilmek lazim.
//
//         // 4. Adim : Return icin  ==> registerOurParameter() methodunu;
//        // parametreler icin ise ==> set() ... metodlerini uyguluyoruz.
//
//        cst1.registerOutParameter(1,Types.NUMERIC); // ttorials
//        cst1.setInt(2, 6);
//        cst1.setInt(3, 4);
//
//        // 5.Adim execute() metodu ile CallableStatement'i calistir
//        cst1.execute();
//
//        // 6. Adim : sonucu cagirmak icin return Datatype tipine gore  cagirmmamiz lazim
//        System.out.println(cst1.getBigDecimal(1));


        // 2.Ornek : Koninin hacmini hesaplayan bir function yazin.
              //  Konide r ve h
        String sql2 = "CREATE OR REPLACE FUNCTION  konininHacmiF (r NUMERIC, h NUMERIC)\n" +
                "RETURNS NUMERIC\n" +
                "LANGUAGE plpgsql\n" +
                "AS\n" +
                "$$\n" +
                "BEGIN\n" +
                "\n" +
                "RETURN 3.14*r*r*h/3 ;\n" +
                "\n" +
                "END\n" +
                "$$";
        st.execute(sql2);
        CallableStatement cst2 = con.prepareCall("{? = call konininHacmiF(?, ?)}");
        cst2.registerOutParameter(1, Types.NUMERIC);
        cst2.setInt(2, 1);
        cst2.setInt(3, 6);
        cst2.execute();
        System.out.println(cst2.getBigDecimal(1));
        System.out.printf("%.2f",cst2.getBigDecimal(1));



    }
    }

